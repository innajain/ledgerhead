generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model account {
  id    String @id @default(cuid())
  name  String
  group String

  from_transfers          transfer_transaction[]   @relation("from_account")
  to_transfers            transfer_transaction[]   @relation("to_account")
  income_transactions     income_transaction[]
  expense_transactions    expense_transaction[]
  investment_transactions investment_transaction[]
  redemption_transactions redemption_transaction[]

  @@unique([name, group])
}

model income_source {
  id    String @id @default(cuid())
  name  String
  group String

  transactions income_transaction[]
}

model expense_item {
  id    String @id @default(cuid())
  name  String
  group String

  transactions expense_transaction[]
}

model mutual_fund {
  id   String @id @default(cuid())
  name String @unique
  isin String @unique

  units mutual_fund_units_lot[]
}

model mutual_fund_units_lot {
  id             String @id @default(cuid())
  mutual_fund_id String

  mutual_fund            mutual_fund            @relation(fields: [mutual_fund_id], references: [id])
  investment_transaction investment_transaction @relation(fields: [id], references: [id], onDelete: Cascade)
  redemption_buckets     redemption_bucket[]
}

// Investment Transaction model
model investment_transaction {
  id              String @id @default(cuid())
  from_account_id String
  units_bought    Float
  buy_nav         Float

  transaction           transaction            @relation(fields: [id], references: [id], onDelete: Cascade)
  from_account          account                @relation(fields: [from_account_id], references: [id])
  mutual_fund_units_lot mutual_fund_units_lot?
}

// Redemption Transaction model with many-to-many relationship
model redemption_transaction {
  id             String @id @default(cuid())
  to_account_id  String
  sell_nav       Float
  units_redeemed Float

  transaction        transaction         @relation(fields: [id], references: [id])
  to_account         account             @relation(fields: [to_account_id], references: [id])
  redemption_buckets redemption_bucket[]
}

model redemption_bucket {
  id                        String @id @default(cuid())
  redemption_transaction_id String

  mutual_fund_units_lot_id String
  units_redeemed           Float

  redemption_transaction redemption_transaction @relation(fields: [redemption_transaction_id], references: [id])
  mutual_fund_units_lot  mutual_fund_units_lot  @relation(fields: [mutual_fund_units_lot_id], references: [id])
}

model transaction {
  id         String           @id @default(cuid())
  created_at DateTime         @default(now())
  date       DateTime
  time       DateTime?
  amount     Float
  type       transaction_type
  note       String?

  transfer_transaction   transfer_transaction?
  expense_transaction    expense_transaction?
  income_transaction     income_transaction?
  investment_transaction investment_transaction?
  redemption_transaction redemption_transaction?
}

model transfer_transaction {
  id String @id

  from_account_id String
  to_account_id   String

  transaction  transaction @relation(fields: [id], references: [id], onDelete: Cascade)
  from_account account     @relation("from_account", fields: [from_account_id], references: [id])
  to_account   account     @relation("to_account", fields: [to_account_id], references: [id])
}

model expense_transaction {
  id String @id

  account_id      String @map("from_account_id")
  expense_item_id String @map("to_sink_id")

  transaction  transaction  @relation(fields: [id], references: [id], onDelete: Cascade)
  account      account      @relation(fields: [account_id], references: [id])
  expense_item expense_item @relation(fields: [expense_item_id], references: [id])
}

model income_transaction {
  id String @id

  income_source_id String @map("from_source_id")
  account_id       String @map("to_account_id")

  transaction   transaction   @relation(fields: [id], references: [id], onDelete: Cascade)
  income_source income_source @relation(fields: [income_source_id], references: [id])
  account       account       @relation(fields: [account_id], references: [id])
}

model db_history {
  id          String                 @id @default(cuid())
  timestamp   DateTime               @default(now())
  event_type  db_history_event_type
  entity_type db_history_entity_type
  entity_id   String
  snapshot    Json // all the tables
}

enum transaction_type {
  TRANSFER
  INCOME
  EXPENSE
  MF_INVESTMENT
  MF_REDEMPTION
}

enum to_or_from {
  FROM
  TO
}

enum db_history_event_type {
  CREATE
  MODIFY
  DELETE
  RESTORE
  INIT
}

enum db_history_entity_type {
  ACCOUNT
  INCOME_SOURCE
  EXPENSE_ITEM
  MUTUAL_FUND

  TRANSFER_TRANSACTION
  EXPENSE_TRANSACTION
  INCOME_TRANSACTION
  ACCOUNT_TRANSACTION
  INVESTMENT_TRANSACTION
  REDEMPTION_TRANSACTION

  DB_HISTORY
}
